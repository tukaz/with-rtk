import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";

import type { AppState, AppThunk } from "../../app/store";
import { fetchAnimals } from "./animalsAPI";

export interface AnimalT {
  name: string;
  id: number;
  place: string;
  lifespan: number;
}

export interface AnimalsState {
  animals: AnimalT[];
  status: "loading" | "failed" | "succeeded";
}

const initialState: AnimalsState = {
  animals: [],
  status: "loading",
};

export const fetchAnimalsAsync = createAsyncThunk(
  "animal/fetchAnimals",
  async () => {
    const response = await fetchAnimals(10);

    return response;
  }
);

export const animalsSlice = createSlice({
  name: "animals",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers(builder) {
    builder
      .addCase(fetchAnimalsAsync.pending, (state, action) => {
        state.status = "loading";
      })
      .addCase(fetchAnimalsAsync.fulfilled, (state, action) => {
        state.status = "succeeded";
        console.log(action.payload, "payload");
        // Add any fetched posts to the array
        state.animals = action.payload;
      })
      .addCase(fetchAnimalsAsync.rejected, (state, action) => {
        state.status = "failed";
        //state.error = action.error.message;
      });
  },
});

// export const {} = animalsSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectAnimals = (state: AppState) => state.animals;

export default animalsSlice.reducer;
